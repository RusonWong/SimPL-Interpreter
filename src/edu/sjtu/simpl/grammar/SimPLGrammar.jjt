/**
 * JJTree template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";
  NODE_DEFAULT_VOID = false;
  MULTI=true;
  KEEP_LINE_COLUMN = false;
  STATIC = false;
  VISITOR = true;}PARSER_BEGIN(SimPL)package edu.sjtu.simpl.grammar;

public class SimPL{  public static void main(String args [])  {    System.out.println("Reading from standard input...");    //System.out.print("Enter an expression like \"1+(2+3)*var;\" :");    SimPL parser = new SimPL(System.in);    try    {
      System.out.println("-------");      SimpleNode n = parser.Program();      n.dump("");      System.out.println("-------");    }    catch (Exception e)    {      System.out.println("Oops.");      System.out.println(e.getMessage());    }  }}PARSER_END(SimPL)SKIP :{  " "| "\t"| "\n"| "\r"| < "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    ) >| < "/*" (~[ "*" ])* "*"    (      ~[ "/" ] (~[ "*" ])* "*"    )*    "/" >}TOKEN : /* LITERALS */{  < INTEGER_LITERAL :    < DECIMAL_LITERAL > ([ "l", "L" ])?  | < HEX_LITERAL > ([ "l", "L" ])?  | < OCTAL_LITERAL > ([ "l", "L" ])?     >| < #DECIMAL_LITERAL : [ "1"-"9" ] ([ "0"-"9" ])* >| < #HEX_LITERAL : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >| < #OCTAL_LITERAL : "0" ([ "0"-"7" ])* >}

TOKEN : /* key words*/
{	< LET : "let">
	| < IN : "in" >
	| < IF : "if" >
	| < THEN : "then">
	| < ELSE : "else" >
	| < WHILE: "while" >
	| < DO : "do" >
	| < END : "end" >
	| < FST : "fst" >
	| < SND : "snd" >
	| < HEAD : "head">
	| < TAIL : "tail" >
	
	| < FUN : "fun" >
	| < TRUE:"true" >
	| < FALSE:"false" >

	| < NIL :"nil">
}

//TOKEN : /*type*/
/*
{
	< INT : "int" >
	| < BOOL : "bool" >
	| < NIL : "nil" >
}
*/
TOKEN : /**/
{
	  < COMMA : "," >
	| < SEMICOLON : ";" >
	| < COLONCOLON : "::" >
	| < COLONEQUAL : ":=" >
	
	//uop
	| < NEGATION : "~" >
	| < NOT : "not" >
	//bop
	| < PLUS : "+" >
	| < MINUS : "-" >
	| < TIMES : "*" >
	| < DIVIDE : "/" >
	| < BIGGER : ">" >
	| < LESS : "<" >
	| < AND : "and" >
	| < OR : "or" >
	| < EQUAL : "=" >
	
	| < LEFTPARENTHESES : "(" >
	| < RIGHTPARENTHESES : ")" >
	| < LBRACKET : "[" >
	| < RBRACKET : "]" >
	| < LBRACE : "{" >
	| < RBRACE : "}" >

	| < ARROW : "->" >

}
TOKEN : /* IDENTIFIERS */{  < IDENTIFIER :    < LETTER >    (      < LETTER >    | < DIGIT >    )* >| < #LETTER : [ "a"-"z", "A"-"Z" ] >| < #DIGIT : [ "0"-"9" ] >}
SimpleNode Program() :{}{  Expression()  {    return jjtThis;  } "$"}
//TODOvoid Expression() :{}{
 	Exp1()	}

void Exp1()#void:
{}
{     (
   	   Exp2()(< SEMICOLON >Exp2())*
       )#Sequence(>1)
     }

void Exp2()#void:
{}
{
      (
        < FUN> Identifier()< ARROW>Exp2()
       )#AnonymousFun
   	 | Exp3()}

void Exp3()#void:
{}
{
  (    Exp4()(< COLONEQUAL >Exp4())*
    )#Assignment(>1)
  }

void Exp4()#void:
{}
{
  (    Exp5()(< COLONCOLON> Exp5())*
    )#List(>1)}

void Exp5()#void:
{}
{
  (    Exp6()(BopAndOr()Exp6())*
  )#AndOrExpr(>1)}

void Exp6()#void:
{}
{	(	  Exp7()(BopELB()Exp7())*
	)#ELBExpr(>1)
}


void Exp7()#void:
{}
{
  (    Exp8()(BopAdditive()Exp8())*
    )#AdditiveExp(>1)}

void Exp8()#void:
{}{
  (    Exp9()(BopMultive()Exp9())*
    )#MultiveExp(>1)}

void Exp9()#void:
{}
{
  ExpTerm()}

void ExpTerm():
{}
{
   	(   	  Identifier()  
 	| LOOKAHEAD(2)Value()        //value
 	| UopExp()					//uop e
 	| LetExp()					//let x =e1 in e2 end
 	| ConditionalExp()			//if e1 then e2 else e3 end
 	| WhileLoopExp()			//while e1 do e2 end
 	| FstExp()					//fst e
 	| SndExp()					//snd e
 	| HeadExp()					//head e
 	| TailExp()					//tail e
	| LeftParenthness()
	)}

//(E...
void LeftParenthness():{}{
	   < LEFTPARENTHESES>Expression()
	   (
	     PairTail()
	   | ApplicationTail()
	   | BracketTail()	   )}

//bracket expression: (e)
void BracketTail():{}{
  < RIGHTPARENTHESES>}


//pair expression: (e1,e2)
void PairTail():
{
}
{	< COMMA >Expression()<RIGHTPARENTHESES >
}

//application: ( e1 e2 )
void ApplicationTail():
{}
{
  	Expression()<RIGHTPARENTHESES >}

//Uop Expression
void UopExp():
{}{
  Uop()Expression()}

//conditianal: if e1 then e2 else e3 end
void ConditionalExp():
{}
{
  	< IF >Expression()< THEN >Expression()< ELSE>Expression()<END >}

//let expression: let x = e1 in e2 end
void LetExp() :
{
}
{
	< LET >Identifier() < EQUAL > Expression() < IN > Expression() < END >
}

//whileloop: while e1 do e2 end
void WhileLoopExp():
{}
{
  < WHILE >Expression()< DO >Expression()< END >}

//fst: fst e
void FstExp():
{}
{
  	< FST >Expression()}

//snd: snd e
void SndExp():
{}
{
  < SND >Expression()}

//head: head e
void HeadExp():
{}
{
	< HEAD >Expression()}

//tail: tail e
void TailExp():
{}
{
  	< TAIL >Expression()}
void Identifier() :{
  Token t;
 }{  t = < IDENTIFIER >
  {
    jjtThis.jjtSetValue(t.image);  }}

//valueexp

void Value():{}{
  	(  	  IntValue()
  	| BoolValue()
  	| NilValue()
  	| NopValue()
 	)}

//int
void IntValue():{
  Token t;}{
  t = < INTEGER_LITERAL >
  {
    jjtThis.jjtSetValue(t.image);
  }}

//bool
void BoolValue():
{
  Token t;}
{	(	  t = < TRUE>	| t = < FALSE>
	)
	{
    	jjtThis.jjtSetValue(t.image);
  	}
}

//empty list
void NilValue():
{
}
{
  < NIL>}

//nop
void NopValue():
{}{
 	< LEFTPARENTHESES><RIGHTPARENTHESES >}

//anonymous function
void AnonymousFun():
{}{
  	< FUN> Identifier()< ARROW>Expression()}

void BopAndOr()#void: // and or op
{}{
  	< AND > #AndOp
	| < OR> #OrOp}

void BopELB()#void://equal less bigger
{}{	 < BIGGER> #BiggerOp
	| < LESS> #LessOp
	| < EQUAL > #EqualOp
}

void BopAdditive()#void:
{}
{
  	 < PLUS> #PlusOp
	| < MINUS> #MinusOp}

void BopMultive()#void:
{}
{
  	< TIMES> #TimesOp
	| < DIVIDE> #DevideOp}

void Uop()#void:{}
{	< NEGATION > #NegationOp
	| < NOT > #NotOp
}



